// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  openid    String   @unique
  nickName  String?
  avatarUrl String?
  gender    Int?
  country   String?
  province  String?
  city      String?
  language  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  recipes Recipe[]
  plans    Plan[]

  @@map("users")
}

model Recipe {
  id          String   @id @default(cuid())
  title       String
  coverImage  String?  // 封面图 URL，可选
  ingredients Json     // 主料/辅料，结构化存储
  sauce       Json     // 调味汁，结构化存储
  steps       Json     // 步骤，含 title、time、content[]
  tips        Json     // 小贴士数组
  description String?
  cookingTime Int?     // in minutes
  servings    Int?     // 份数
  difficulty  String?  // easy, medium, hard
  imageUrl    String?
  tags        String[] // Array of tags
  isPublic    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  mealPlanItems MealPlanItem[]

  @@map("recipes")
}

model Plan {
  id          String   @id @default(cuid())
  name        String
  description String?
  date        DateTime // 关联的日期
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  mealPlanItems MealPlanItem[]

  @@map("plans")
}

model MealPlanItem {
  id        String   @id @default(cuid())
  title     String
  cookTime  String   // 烹饪时间，如 "45分钟"
  completed Boolean  @default(false)
  order     Int      // 在计划中的顺序
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  planId String
  plan   Plan   @relation(fields: [planId], references: [id], onDelete: Cascade)
  
  recipeId String?
  recipe   Recipe? @relation(fields: [recipeId], references: [id], onDelete: SetNull)

  @@map("meal_plan_items")
}
